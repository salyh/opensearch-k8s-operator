name: Test Matrix
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:

jobs:
  k124:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        #os 2.1/2.2 missing
        os-version: [2.13.0, 2.0.1, 1.3.16, 1.2.4]
        k3s-version: [v1.24]
        op-version: [main]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.work'
          cache: false
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: ${{ matrix.k3s-version }}
          k3d-name: opensearch-operator-tests
          k3d-args: --agents 2 -p 30000-30005:30000-30005@agent:0
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: |
          set -e

          echo "OpenSearch ${{ matrix.os-version }}"
          echo "K3s ${{ matrix.k3s-version }}"
          echo "Operator ${{ matrix.op-version }}"

          export CLUSTER_NAME=opensearch-operator-tests
          ## Check disk to avoid failed shard assignments due to watermarking
          df -h
          cd opensearch-operator
          ## Prepare kubeconfig
          k3d kubeconfig get $CLUSTER_NAME > functionaltests/kubeconfig
          export KUBECONFIG=$(pwd)/functionaltests/kubeconfig

          chmod 700 "$KUBECONFIG"

          echo "Install Operator ..."

          if [ "${{ matrix.op-version }}" = "main" ]
          then

            ## Build controller docker image
            make docker-build

            ## Import controller docker image
            k3d image import -c $CLUSTER_NAME controller:latest

            ## Install helm chart
            helm install opensearch-operator ../charts/opensearch-operator --debug --set manager.image.repository=controller --set manager.image.tag=latest --set manager.image.pullPolicy=IfNotPresent --namespace default --wait
          else
            helm repo add opensearch-operator https://opensearch-project.github.io/opensearch-k8s-operator/
            helm repo update opensearch-operator
            helm install opensearch-operator opensearch-operator/opensearch-operator --debug --version ${{ matrix.op-version }} --namespace default --wait
          fi
          
          echo "Operator installed, now install cluster ..."

          helm install opensearch-cluster ../charts/opensearch-cluster --debug --set opensearchCluster.general.version=${{ matrix.os-version }}  --set opensearchCluster.dashboards.version=${{ matrix.os-version }} --wait
          cd functionaltests

          ## Run tests
          echo "Run tests ..."
          go test ./helmtests -timeout 15m
  k127:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        os-version: [2.13.0, 2.0.1, 1.3.16, 1.2.4]
        k3s-version: [v1.27]
        op-version: [main]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.work'
          cache: false
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: ${{ matrix.k3s-version }}
          k3d-name: opensearch-operator-tests
          k3d-args: --agents 2 -p 30000-30005:30000-30005@agent:0
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: |
          set -e

          echo "OpenSearch ${{ matrix.os-version }}"
          echo "K3s ${{ matrix.k3s-version }}"
          echo "Operator ${{ matrix.op-version }}"

          export CLUSTER_NAME=opensearch-operator-tests
          ## Check disk to avoid failed shard assignments due to watermarking
          df -h
          cd opensearch-operator
          ## Prepare kubeconfig
          k3d kubeconfig get $CLUSTER_NAME > functionaltests/kubeconfig
          export KUBECONFIG=$(pwd)/functionaltests/kubeconfig

          chmod 700 "$KUBECONFIG"

          echo "Install Operator ..."

          if [ "${{ matrix.op-version }}" = "main" ]
          then

            ## Build controller docker image
            make docker-build

            ## Import controller docker image
            k3d image import -c $CLUSTER_NAME controller:latest

            ## Install helm chart
            helm install opensearch-operator ../charts/opensearch-operator --debug --set manager.image.repository=controller --set manager.image.tag=latest --set manager.image.pullPolicy=IfNotPresent --namespace default --wait
          else
            helm repo add opensearch-operator https://opensearch-project.github.io/opensearch-k8s-operator/
            helm repo update opensearch-operator
            helm install opensearch-operator opensearch-operator/opensearch-operator --debug --version ${{ matrix.op-version }} --namespace default --wait
          fi
          
          echo "Operator installed, now install cluster ..."

          helm install opensearch-cluster ../charts/opensearch-cluster --debug --set opensearchCluster.general.version=${{ matrix.os-version }}  --set opensearchCluster.dashboards.version=${{ matrix.os-version }} --wait
          cd functionaltests

          ## Run tests
          echo "Run tests ..."
          go test ./helmtests -timeout 15m
  k129:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        os-version: [2.13.0, 2.0.1, 1.3.16, 1.2.4]
        k3s-version: [v1.29]
        op-version: [main]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.work'
          cache: false
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: ${{ matrix.k3s-version }}
          k3d-name: opensearch-operator-tests
          k3d-args: --agents 2 -p 30000-30005:30000-30005@agent:0
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: |
          set -e

          echo "OpenSearch ${{ matrix.os-version }}"
          echo "K3s ${{ matrix.k3s-version }}"
          echo "Operator ${{ matrix.op-version }}"

          export CLUSTER_NAME=opensearch-operator-tests
          ## Check disk to avoid failed shard assignments due to watermarking
          df -h
          cd opensearch-operator
          ## Prepare kubeconfig
          k3d kubeconfig get $CLUSTER_NAME > functionaltests/kubeconfig
          export KUBECONFIG=$(pwd)/functionaltests/kubeconfig

          chmod 700 "$KUBECONFIG"

          echo "Install Operator ..."

          if [ "${{ matrix.op-version }}" = "main" ]
          then

            ## Build controller docker image
            make docker-build

            ## Import controller docker image
            k3d image import -c $CLUSTER_NAME controller:latest

            ## Install helm chart
            helm install opensearch-operator ../charts/opensearch-operator --debug --set manager.image.repository=controller --set manager.image.tag=latest --set manager.image.pullPolicy=IfNotPresent --namespace default --wait
          else
            helm repo add opensearch-operator https://opensearch-project.github.io/opensearch-k8s-operator/
            helm repo update opensearch-operator
            helm install opensearch-operator opensearch-operator/opensearch-operator --debug --version ${{ matrix.op-version }} --namespace default --wait
          fi
          
          echo "Operator installed, now install cluster ..."

          helm install opensearch-cluster ../charts/opensearch-cluster --debug --set opensearchCluster.general.version=${{ matrix.os-version }}  --set opensearchCluster.dashboards.version=${{ matrix.os-version }} --wait
          cd functionaltests

          ## Run tests
          echo "Run tests ..."
          go test ./helmtests -timeout 15m